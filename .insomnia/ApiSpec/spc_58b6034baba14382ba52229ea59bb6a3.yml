_id: spc_58b6034baba14382ba52229ea59bb6a3
type: ApiSpec
parentId: wrk_6cdb1428addb45259cabbb76310bf690
modified: 1676450792115
created: 1676021235516
fileName: vizsgaremek.yaml
contents: >-
  {
    "openapi": "3.0.3",
    "info": {
      "title": "Mozi vizsgaremek",
      "description": "Karsza Levente, Klement Szabolcs, Papp DÃ¡vid",
      "version": "0.0.1"
    },
    "components": {
      "securitySchemes": {
        "bearer": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {}
    },
    "paths": {
      "/": {
        "get": {
          "summary": "Test endpoint",
          "tags": [
            "test"
          ],
          "security": [
            {
              "bearer": []
            }
          ],
          "responses": {
            "200": {
              "description": "Default Response"
            }
          }
        }
      },
      "/auth/register": {
        "post": {
          "summary": "Register a new user",
          "tags": [
            "auth"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "minLength": 4,
                      "maxLength": 32,
                      "pattern": "^([A-Za-z0-9_-]){4,32}$",
                      "type": "string"
                    },
                    "firstName": {
                      "minLength": 1,
                      "type": "string"
                    },
                    "lastName": {
                      "minLength": 1,
                      "type": "string"
                    },
                    "password": {
                      "minLength": 8,
                      "maxLength": 256,
                      "pattern": "^[A-Za-z0-9!@#$%&^_W]{8,256}$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "username",
                    "firstName",
                    "lastName",
                    "password"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Registration successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Registration successful.",
                    "type": "object",
                    "properties": {
                      "refreshToken": {
                        "description": "The refresh token used to get a new access token",
                        "type": "string"
                      },
                      "accessToken": {
                        "description": "The bearer token to be passed in the Authorization header to the backend.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "refreshToken",
                      "accessToken"
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Username already taken.",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Username already taken.",
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "Identical to HTTP status code",
                        "type": "number"
                      },
                      "error": {
                        "description": "Short description of error (validator errors describe the status code instead)",
                        "type": "string"
                      },
                      "message": {
                        "description": "Longer description of error",
                        "type": "string"
                      }
                    },
                    "required": [
                      "statusCode",
                      "error",
                      "message"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "summary": "Log in to an existing account",
          "tags": [
            "auth"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "minLength": 4,
                      "maxLength": 32,
                      "pattern": "^([A-Za-z0-9_-]){4,32}$",
                      "type": "string"
                    },
                    "password": {
                      "minLength": 8,
                      "maxLength": 256,
                      "pattern": "^[A-Za-z0-9!@#$%&^_W]{8,256}$",
                      "type": "string"
                    },
                    "totp": {
                      "minLength": 6,
                      "maxLength": 6,
                      "pattern": "^[0-9]{6}$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful login",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Successful login",
                    "type": "object",
                    "properties": {
                      "refreshToken": {
                        "description": "The refresh token used to get a new access token",
                        "type": "string"
                      },
                      "accessToken": {
                        "description": "The bearer token to be passed in the Authorization header to the backend.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "refreshToken",
                      "accessToken"
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Invalid username or password",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Invalid username or password",
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "Identical to HTTP status code",
                        "type": "number"
                      },
                      "error": {
                        "description": "Short description of error (validator errors describe the status code instead)",
                        "type": "string"
                      },
                      "message": {
                        "description": "Longer description of error",
                        "type": "string"
                      }
                    },
                    "required": [
                      "statusCode",
                      "error",
                      "message"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "/auth/refresh": {
        "post": {
          "summary": "Issue a new access token",
          "tags": [
            "auth"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refreshToken": {
                      "description": "The user's refresh token",
                      "type": "string"
                    }
                  },
                  "required": [
                    "refreshToken"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Issued new access token",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Issued new access token",
                    "type": "object",
                    "properties": {
                      "accessToken": {
                        "description": "The bearer token to be passed in the Authorization header to the backend.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accessToken"
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or expired refresh token",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Invalid or expired refresh token",
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "Identical to HTTP status code",
                        "type": "number"
                      },
                      "error": {
                        "description": "Short description of error (validator errors describe the status code instead)",
                        "type": "string"
                      },
                      "message": {
                        "description": "Longer description of error",
                        "type": "string"
                      }
                    },
                    "required": [
                      "statusCode",
                      "error",
                      "message"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "User associated with refresh token not found",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "User associated with refresh token not found",
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "Identical to HTTP status code",
                        "type": "number"
                      },
                      "error": {
                        "description": "Short description of error (validator errors describe the status code instead)",
                        "type": "string"
                      },
                      "message": {
                        "description": "Longer description of error",
                        "type": "string"
                      }
                    },
                    "required": [
                      "statusCode",
                      "error",
                      "message"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "/auth/totp": {
        "post": {
          "summary": "Start TOTP onboarding",
          "tags": [
            "auth",
            "totp"
          ],
          "security": [
            {
              "bearer": []
            }
          ],
          "responses": {
            "200": {
              "description": "Default Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "secret": {
                        "description": "The TOTP shared secret",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The otpauth URI required to generate a QR code",
                        "type": "string"
                      }
                    },
                    "required": [
                      "secret",
                      "uri"
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "TOTP is already enabled",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "TOTP is already enabled",
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "Identical to HTTP status code",
                        "type": "number"
                      },
                      "error": {
                        "description": "Short description of error (validator errors describe the status code instead)",
                        "type": "string"
                      },
                      "message": {
                        "description": "Longer description of error",
                        "type": "string"
                      }
                    },
                    "required": [
                      "statusCode",
                      "error",
                      "message"
                    ]
                  }
                }
              }
            }
          }
        },
        "put": {
          "summary": "Complete TOTP onboarding",
          "tags": [
            "auth",
            "totp"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "password": {
                      "minLength": 8,
                      "maxLength": 256,
                      "pattern": "^[A-Za-z0-9!@#$%&^_W]{8,256}$",
                      "type": "string"
                    },
                    "totp": {
                      "minLength": 6,
                      "maxLength": 6,
                      "pattern": "^[0-9]{6}$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "password",
                    "totp"
                  ]
                }
              }
            },
            "required": true
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "responses": {
            "200": {
              "description": "Default Response"
            }
          }
        },
        "delete": {
          "summary": "Disable TOTP two-factor authentication",
          "tags": [
            "auth",
            "totp"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "password": {
                      "minLength": 8,
                      "maxLength": 256,
                      "pattern": "^[A-Za-z0-9!@#$%&^_W]{8,256}$",
                      "type": "string"
                    },
                    "totp": {
                      "minLength": 6,
                      "maxLength": 6,
                      "pattern": "^[0-9]{6}$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "password",
                    "totp"
                  ]
                }
              }
            },
            "required": true
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "responses": {
            "200": {
              "description": "Default Response"
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "auth",
        "description": "Authentication"
      },
      {
        "name": "test",
        "description": "Testing"
      },
      {
        "name": "totp",
        "description": "TOTP Second factor"
      }
    ]
  }
contentType: yaml
